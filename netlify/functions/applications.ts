import { Handler, HandlerEvent, HandlerContext } from "@netlify/functions";

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞—è–≤–∫–∏
interface FullApplicationData {
  fullName: string;
  birthDate: string;
  phone: string;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞—è–≤–∫–∏ (—Ç–æ–ª—å–∫–æ —Ç–µ–ª–µ—Ñ–æ–Ω)
interface QuickApplicationData {
  phone: string;
  source?: string;
}

// –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ç–∏–ø
type ApplicationData = FullApplicationData | QuickApplicationData;

const handler: Handler = async (event: HandlerEvent, context: HandlerContext) => {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞
  if (event.httpMethod !== "POST") {
    return {
      statusCode: 405,
      body: JSON.stringify({ message: "Method Not Allowed" }),
    };
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    const data: ApplicationData = JSON.parse(event.body || "{}");

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∑–∞—è–≤–æ–∫)
    if (!data.phone) {
      return {
        statusCode: 400,
        body: JSON.stringify({ message: "Missing required field: phone" }),
      };
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞—è–≤–∫–∏
    const isFullApplication = 'fullName' in data && 'birthDate' in data;
    const isQuickApplication = 'source' in data || (!('fullName' in data) && !('birthDate' in data));

    console.log('Application type:', isFullApplication ? 'full' : 'quick', 'Data:', data);

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID —á–∞—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    const chatId = process.env.TELEGRAM_CHAT_ID;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (!botToken || !chatId) {
      console.error("Missing environment variables: TELEGRAM_BOT_TOKEN or TELEGRAM_CHAT_ID");
      return {
        statusCode: 500,
        body: JSON.stringify({ message: "Server configuration error" }),
      };
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞—è–≤–∫–∏
    let message: string;

    if (isFullApplication) {
      const fullData = data as FullApplicationData;
      message = `üîî *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞*\n\nüìã *–§–ò–û*: ${fullData.fullName}\nüéÇ *–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è*: ${fullData.birthDate}\nüì± *–¢–µ–ª–µ—Ñ–æ–Ω*: ${fullData.phone}\n\n‚è∞ *–î–∞—Ç–∞ –∑–∞—è–≤–∫–∏*: ${new Date().toLocaleString('ru-RU')}`;
    } else {
      const quickData = data as QuickApplicationData;
      const source = quickData.source || 'unknown';
      message = `‚ö° *–ë—ã—Å—Ç—Ä–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞*\n\nüì± *–¢–µ–ª–µ—Ñ–æ–Ω*: ${quickData.phone}\nüìç *–ò—Å—Ç–æ—á–Ω–∏–∫*: ${source}\n\n‚è∞ *–î–∞—Ç–∞ –∑–∞—è–≤–∫–∏*: ${new Date().toLocaleString('ru-RU')}`;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    const telegramResponse = await fetch(
      `https://api.telegram.org/bot${botToken}/sendMessage`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: message,
          parse_mode: "Markdown",
        }),
      }
    );

    if (!telegramResponse.ok) {
      const telegramError = await telegramResponse.json();
      console.error("Telegram API error:", telegramError);
      console.error("Response status:", telegramResponse.status);
      console.error("Response text:", await telegramResponse.text());
      throw new Error(`Failed to send message to Telegram: ${telegramResponse.status}`);
    }

    const telegramResult = await telegramResponse.json();
    console.log("Message sent successfully to Telegram:", telegramResult);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    return {
      statusCode: 200,
      body: JSON.stringify({
        message: "Application submitted successfully",
        type: isFullApplication ? 'full' : 'quick'
      }),
    };
  } catch (error) {
    console.error("Error processing application:", error);
    console.error("Request body:", event.body);
    console.error("Environment check - Bot token exists:", !!process.env.TELEGRAM_BOT_TOKEN);
    console.error("Environment check - Chat ID exists:", !!process.env.TELEGRAM_CHAT_ID);

    return {
      statusCode: 500,
      body: JSON.stringify({
        message: "Internal Server Error",
        error: error instanceof Error ? error.message : "Unknown error"
      }),
    };
  }
};

export { handler };
